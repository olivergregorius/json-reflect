plugins {
    id "org.springframework.boot" version "2.6.3"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "java"

    id "jacoco"
    id "org.sonarqube" version "3.3"

    id "maven-publish"
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

def snapshotVersion = "0.1.0-SNAPSHOT"

sourceCompatibility = JavaVersion.VERSION_17
group = "dev.gregorius.library"
version = project.hasProperty("releaseVersion") ? releaseVersion.replaceAll("^v", "") : snapshotVersion

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot
    implementation "org.springframework.boot:spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-web"
    testImplementation "org.springframework.boot:spring-boot-starter-test"

    // Lombok
    compileOnly "org.projectlombok:lombok:1.18.22"
    annotationProcessor "org.projectlombok:lombok:1.18.22"

    // GSON
    implementation "com.google.code.gson:gson:2.8.9"

    // Hamcrest
    implementation "org.hamcrest:hamcrest:2.2"

    // Util
    implementation "org.apache.commons:commons-lang3:3.12.0"
}

java {
    withJavadocJar()
    withSourcesJar()
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

def testCoverageExludes = []

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    jacoco {
        excludes += testCoverageExludes
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(
            fileTree(dir: "build/classes/java/main", excludes: testCoverageExludes)
        )
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "olivergregorius_json-reflect"
        property "sonar.organization", "olivergregorius"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.projectDir}/build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.coverage.exclusions", testCoverageExludes.join(",")
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'JSON REFlecT'
                description = 'JSON REST Fluent economic Testing'
                url = 'https://github.com/olivergregorius/json-reflect'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/olivergregorius/json-reflect/blob/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'olivergregorius'
                        name = 'Oliver Gregorius'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/olivergregorius/json-reflect.git'
                    developerConnection = 'scm:git:https://github.com/olivergregorius/json-reflect.git'
                    url = 'https://github.com/olivergregorius/json-reflect'
                }
            }
        }
    }
}


signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
